
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lyc.compiler;

import java_cup.runtime.*;
import java.util.*;
import lyc.compiler.simbolsTable.SimbolTable;
import lyc.compiler.simbolsTable.SimbolRow;
import lyc.compiler.simbolsTable.DataType;
import lyc.compiler.tercetos.Tercetos;
import lyc.compiler.tercetos.Terceto;
import lyc.compiler.assembler.Assembler;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\020\004\000\002\003" +
    "\003\000\002\003\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\027\002\000" +
    "\002\004\006\000\002\030\002\000\002\031\002\000\002" +
    "\010\013\000\002\011\011\000\002\032\002\000\002\033" +
    "\002\000\002\011\017\000\002\034\002\000\002\035\002" +
    "\000\002\026\014\000\002\026\010\000\002\036\002\000" +
    "\002\026\007\000\002\037\002\000\002\026\007\000\002" +
    "\022\003\000\002\022\003\000\002\012\003\000\002\012" +
    "\004\000\002\040\002\000\002\012\006\000\002\041\002" +
    "\000\002\012\006\000\002\042\002\000\002\043\002\000" +
    "\002\013\007\000\002\013\007\000\002\013\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\005\005\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\005\000\002\015" +
    "\006\000\002\025\003\000\002\025\004\000\002\016\005" +
    "\000\002\023\005\000\002\023\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\036\006\001\002\000\020\016\041\017" +
    "\027\020\037\022\026\023\040\044\034\045\032\001\002" +
    "\000\004\002\025\001\002\000\004\024\007\001\002\000" +
    "\004\016\013\001\002\000\006\037\017\043\016\001\002" +
    "\000\006\016\013\025\014\001\002\000\006\016\uffca\025" +
    "\uffca\001\002\000\006\037\uffc6\043\uffc6\001\002\000\020" +
    "\016\uffcb\017\uffcb\020\uffcb\022\uffcb\023\uffcb\044\uffcb\045" +
    "\uffcb\001\002\000\006\016\uffc9\025\uffc9\001\002\000\004" +
    "\016\024\001\002\000\010\040\022\041\020\042\023\001" +
    "\002\000\006\016\uffc4\025\uffc4\001\002\000\006\016\uffc8" +
    "\025\uffc8\001\002\000\006\016\uffc3\025\uffc3\001\002\000" +
    "\006\016\uffc5\025\uffc5\001\002\000\006\037\uffc7\043\uffc7" +
    "\001\002\000\004\002\001\001\002\000\004\011\171\001" +
    "\002\000\004\011\161\001\002\000\024\002\ufffd\016\ufffd" +
    "\017\ufffd\020\ufffd\022\ufffd\023\ufffd\025\ufffd\044\ufffd\045" +
    "\ufffd\001\002\000\024\002\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\022\ufffc\023\ufffc\025\ufffc\044\ufffc\045\ufffc\001\002\000" +
    "\004\011\154\001\002\000\022\002\000\016\041\017\027" +
    "\020\037\022\026\023\040\044\034\045\032\001\002\000" +
    "\004\011\143\001\002\000\024\002\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\022\ufffa\023\ufffa\025\ufffa\044\ufffa\045\ufffa\001" +
    "\002\000\024\002\uffff\016\uffff\017\uffff\020\uffff\022\uffff" +
    "\023\uffff\025\uffff\044\uffff\045\uffff\001\002\000\004\011" +
    "\075\001\002\000\004\011\067\001\002\000\004\004\ufff9" +
    "\001\002\000\024\002\ufffb\016\ufffb\017\ufffb\020\ufffb\022" +
    "\ufffb\023\ufffb\025\ufffb\044\ufffb\045\ufffb\001\002\000\004" +
    "\004\044\001\002\000\014\011\050\013\047\014\045\015" +
    "\046\016\053\001\002\000\054\002\uffce\005\uffce\006\uffce" +
    "\007\uffce\010\uffce\012\uffce\016\uffce\017\uffce\020\uffce\022" +
    "\uffce\023\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\044\uffce\045\uffce\001\002\000" +
    "\054\002\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\012\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\022\uffcd\023\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\044\uffcd\045\uffcd\001\002\000\054\002\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\012\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\022\uffcf\023\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\044\uffcf\045\uffcf\001\002" +
    "\000\014\011\050\013\047\014\045\015\046\016\053\001" +
    "\002\000\054\002\uffd4\005\uffd4\006\uffd4\007\060\010\061" +
    "\012\uffd4\016\uffd4\017\uffd4\020\uffd4\022\uffd4\023\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\044\uffd4\045\uffd4\001\002\000\054\002\uffd1\005" +
    "\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\022\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\044\uffd1\045\uffd1" +
    "\001\002\000\054\002\uffd0\005\uffd0\006\uffd0\007\uffd0\010" +
    "\uffd0\012\uffd0\016\uffd0\017\uffd0\020\uffd0\022\uffd0\023\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\044\uffd0\045\uffd0\001\002\000\030\002\ufff8" +
    "\005\056\006\055\016\ufff8\017\ufff8\020\ufff8\022\ufff8\023" +
    "\ufff8\025\ufff8\044\ufff8\045\ufff8\001\002\000\014\011\050" +
    "\013\047\014\045\015\046\016\053\001\002\000\014\011" +
    "\050\013\047\014\045\015\046\016\053\001\002\000\054" +
    "\002\uffd6\005\uffd6\006\uffd6\007\060\010\061\012\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\022\uffd6\023\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\044" +
    "\uffd6\045\uffd6\001\002\000\014\011\050\013\047\014\045" +
    "\015\046\016\053\001\002\000\014\011\050\013\047\014" +
    "\045\015\046\016\053\001\002\000\054\002\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\012\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\022\uffd2\023\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\044\uffd2\045\uffd2\001" +
    "\002\000\054\002\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\012\uffd3\016\uffd3\017\uffd3\020\uffd3\022\uffd3\023\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\044\uffd3\045\uffd3\001\002\000\054\002\uffd5\005" +
    "\uffd5\006\uffd5\007\060\010\061\012\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\022\uffd5\023\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\044\uffd5\045\uffd5" +
    "\001\002\000\010\005\056\006\055\012\066\001\002\000" +
    "\054\002\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\012\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\022\uffcc\023\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\044\uffcc\045\uffcc\001\002\000\006\014\070\016\072\001" +
    "\002\000\006\012\uffe7\043\uffe7\001\002\000\004\012\uffea" +
    "\001\002\000\006\012\uffe8\043\uffe8\001\002\000\004\012" +
    "\074\001\002\000\032\002\uffe9\012\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\022\uffe9\023\uffe9\025\uffe9\033\uffe9\034\uffe9\044" +
    "\uffe9\045\uffe9\001\002\000\026\011\100\013\047\014\045" +
    "\015\046\016\053\022\026\023\040\035\102\044\034\045" +
    "\032\001\002\000\004\012\130\001\002\000\010\012\uffdc" +
    "\033\uffdc\034\uffdc\001\002\000\014\011\050\013\047\014" +
    "\045\015\046\016\053\001\002\000\020\005\056\006\055" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\001\002\000" +
    "\024\011\100\013\047\014\045\015\046\016\053\022\026" +
    "\023\040\044\034\045\032\001\002\000\010\012\uffe6\033" +
    "\uffe4\034\uffe2\001\002\000\004\034\110\001\002\000\004" +
    "\033\106\001\002\000\024\011\100\013\047\014\045\015" +
    "\046\016\053\022\026\023\040\044\034\045\032\001\002" +
    "\000\004\012\uffe3\001\002\000\024\011\100\013\047\014" +
    "\045\015\046\016\053\022\026\023\040\044\034\045\032" +
    "\001\002\000\004\012\uffe1\001\002\000\004\012\uffe5\001" +
    "\002\000\014\026\116\027\115\030\117\031\121\032\120" +
    "\001\002\000\014\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\001\002\000\014\011\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\001\002\000\014\011\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\001\002\000\014\011\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\001\002\000\014\011\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\001\002\000\014\011\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\001\002\000\014\011\050\013" +
    "\047\014\045\015\046\016\053\001\002\000\014\005\056" +
    "\006\055\012\uffde\033\uffde\034\uffde\001\002\000\022\005" +
    "\056\006\055\012\066\026\116\027\115\030\117\031\121" +
    "\032\120\001\002\000\014\011\050\013\047\014\045\015" +
    "\046\016\053\001\002\000\010\005\056\006\055\012\127" +
    "\001\002\000\010\012\uffdd\033\uffdd\034\uffdd\001\002\000" +
    "\004\024\131\001\002\000\020\016\041\017\027\020\037" +
    "\022\026\023\040\044\034\045\032\001\002\000\022\016" +
    "\041\017\027\020\037\022\026\023\040\025\133\044\034" +
    "\045\032\001\002\000\026\002\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff3\022\ufff4\023\ufff4\025\ufff4\044\ufff4\045\ufff4" +
    "\001\002\000\024\002\ufffe\016\ufffe\017\ufffe\020\ufffe\022" +
    "\ufffe\023\ufffe\025\ufffe\044\ufffe\045\ufffe\001\002\000\004" +
    "\021\136\001\002\000\004\024\137\001\002\000\020\016" +
    "\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\044\ufff2\045\ufff2" +
    "\001\002\000\020\016\041\017\027\020\037\022\026\023" +
    "\040\044\034\045\032\001\002\000\022\016\041\017\027" +
    "\020\037\022\026\023\040\025\142\044\034\045\032\001" +
    "\002\000\024\002\ufff1\016\ufff1\017\ufff1\020\ufff1\022\ufff1" +
    "\023\ufff1\025\ufff1\044\ufff1\045\ufff1\001\002\000\006\014" +
    "\070\016\072\001\002\000\004\043\ufff0\001\002\000\004" +
    "\043\146\001\002\000\006\014\070\016\072\001\002\000" +
    "\004\043\uffef\001\002\000\004\043\151\001\002\000\004" +
    "\013\152\001\002\000\004\012\153\001\002\000\032\002" +
    "\uffee\012\uffee\016\uffee\017\uffee\020\uffee\022\uffee\023\uffee" +
    "\025\uffee\033\uffee\034\uffee\044\uffee\045\uffee\001\002\000" +
    "\006\014\070\016\072\001\002\000\004\043\156\001\002" +
    "\000\006\014\070\016\072\001\002\000\004\012\160\001" +
    "\002\000\032\002\uffed\012\uffed\016\uffed\017\uffed\020\uffed" +
    "\022\uffed\023\uffed\025\uffed\033\uffed\034\uffed\044\uffed\045" +
    "\uffed\001\002\000\026\011\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\022\ufff7\023\ufff7\035\ufff7\044\ufff7\045\ufff7\001" +
    "\002\000\026\011\100\013\047\014\045\015\046\016\053" +
    "\022\026\023\040\035\102\044\034\045\032\001\002\000" +
    "\004\012\ufff6\001\002\000\004\012\165\001\002\000\004" +
    "\024\166\001\002\000\020\016\041\017\027\020\037\022" +
    "\026\023\040\044\034\045\032\001\002\000\022\016\041" +
    "\017\027\020\037\022\026\023\040\025\170\044\034\045" +
    "\032\001\002\000\024\002\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\022\ufff5\023\ufff5\025\ufff5\044\ufff5\045\ufff5\001\002\000" +
    "\006\014\070\016\072\001\002\000\004\012\uffec\001\002" +
    "\000\004\012\174\001\002\000\032\002\uffeb\012\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\022\uffeb\023\uffeb\025\uffeb\033\uffeb" +
    "\034\uffeb\044\uffeb\045\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\006\015\003\020\004\001\001\000\016\002" +
    "\035\003\032\004\027\010\030\011\041\026\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\011\023" +
    "\007\025\010\001\001\000\002\001\001\000\006\016\014" +
    "\023\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\133" +
    "\004\027\010\030\011\041\026\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\053\006\050\007\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\064\006\050\007\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\063\007\051\001\001\000\006\006\056" +
    "\007\051\001\001\000\002\001\001\000\004\007\062\001" +
    "\001\000\004\007\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\070\001\001\000\002\001\001\000\004" +
    "\037\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\100\006\050\007\051\012\075" +
    "\013\102\026\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\123\006\050\007\051\001\001\000\004" +
    "\042\112\001\001\000\014\005\100\006\050\007\051\013" +
    "\111\026\076\001\001\000\006\040\104\041\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\100\006" +
    "\050\007\051\013\106\026\076\001\001\000\002\001\001" +
    "\000\014\005\100\006\050\007\051\013\110\026\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\113" +
    "\001\001\000\004\043\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\122\006\050\007\051\001\001\000" +
    "\002\001\001\000\004\014\124\001\001\000\010\005\125" +
    "\006\050\007\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\002\035\003\131\004\027" +
    "\010\030\011\041\026\034\001\001\000\014\002\133\004" +
    "\027\010\030\011\041\026\034\001\001\000\004\032\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\137\001\001\000\016\002\035\003\140" +
    "\004\027\010\030\011\041\026\034\001\001\000\014\002" +
    "\133\004\027\010\030\011\041\026\034\001\001\000\002" +
    "\001\001\000\004\022\143\001\001\000\004\034\144\001" +
    "\001\000\002\001\001\000\004\022\146\001\001\000\004" +
    "\035\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\154\001\001" +
    "\000\002\001\001\000\004\022\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\161\001\001\000\016" +
    "\005\100\006\050\007\051\012\162\013\102\026\076\001" +
    "\001\000\004\031\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\002\035\003\166\004\027\010\030\011" +
    "\041\026\034\001\001\000\014\002\133\004\027\010\030" +
    "\011\041\026\034\001\001\000\002\001\001\000\004\022" +
    "\171\001\001\000\004\036\172\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public List<SimbolRow> getListaSimbolos() {
        return action_obj.simbolTable.getListaSimbolos();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


    Stack<Integer> stack = new Stack<Integer>();
    public SimbolTable simbolTable = SimbolTable.getSingletonInstance();
    public ArrayList<String> identifiersList = new ArrayList();
    ArrayList<Object> element = new ArrayList<Object>();
    ArrayList<String> elementTipados = new ArrayList<String>();
    int medio;
    DataType tipo,ttipo,etipo;

    public Tercetos tercetos = Tercetos.getSingletonInstance();
    public Assembler assembler = Assembler.getSingletonInstance();

    //en duda si se usa
    public void agregar_a_lista(Object elem)  {
            element.add(elem);
    }

    Integer indexFactor = -1;
    Integer indexExpression = -1;
    Integer indexTerm = -1;
    Integer indexAssignment = -1;
    //Integer indexComparator = -1;
    //Integer indexRead = -1;
    //Integer indexWrite = -1;
    Integer cantComparaciones=1;
    Integer value=-1;
    Integer jumpWhile=-1;
    Integer indexExpressionLeft = -1;
    Integer indexExpressionRight = -1;
    Integer indexComparation = -1;
    Integer indexToUpdate=-1;
    Integer indexIdentifier = -1;
    Integer indexComparationLeft=-1;
    Integer indexComparationRight=-1;
    String comparatorSimbol;
    String cpm ;


    ///funciones especiales
    String cade,cadena1, cadena2;
    Integer posCade1,posCade2,posLongCade1,posLongCade2,posRecorte;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= initiation block 
            {
              Object RESULT =null;
		 tercetos.print(); assembler.generar(tercetos.tercetos);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= sentence 
            {
              Object RESULT =null;
		 System.out.println("Block"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= block sentence 
            {
              Object RESULT =null;
		 System.out.println("Blocks"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentence ::= assignment 
            {
              Object RESULT =null;
		 System.out.println("End Sentence"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentence ::= iteration 
            {
              Object RESULT =null;
		 System.out.println("Sentence interation"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentence ::= selection 
            {
              Object RESULT =null;
		 System.out.println("Sentence selecction"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentence ::= function 
            {
              Object RESULT =null;
		 System.out.println("Sentence function"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
indexIdentifier = tercetos.create(id.toString(), "", "");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // assignment ::= IDENTIFIER NT$0 ASSIG expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 indexAssignment = tercetos.create("=", indexIdentifier, indexExpression);
    System.out.println("Assignment"+indexAssignment);
    System.out.println(simbolTable.buscaRow(id.toString()));
    simbolTable.sonCompatible(id.toString(),etipo);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;

                jumpWhile = tercetos.size() + 1;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;


            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // iteration ::= WHILE OPEN_BRACKET NT$1 condition NT$2 CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
                if(cantComparaciones==2){
                    Integer indexToUpdate = stack.pop();
                    Integer value = tercetos.size() + 2;
                    tercetos.update(indexToUpdate, value);
                    cantComparaciones= 1;
                }
                Integer indexToUpdate = stack.pop();
                Integer value = tercetos.size() + 2;
                tercetos.update(indexToUpdate, value);
                Integer indexBi = tercetos.create("BI", jumpWhile, "");
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET 
            {
              Object RESULT =null;
		
                     if(cantComparaciones==2){
                         Integer indexToUpdate = stack.pop();
                         Integer value = tercetos.size() + 1;
                         tercetos.update(indexToUpdate, value);
                         cantComparaciones= 1;
                     }
                     Integer indexToUpdate = stack.pop();
                     Integer value = tercetos.size() + 1;
                     tercetos.update(indexToUpdate, value);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              Object RESULT =null;

                    indexToUpdate = stack.pop();
                    value = tercetos.size() + 2;
                    System.out.println("If");
                    tercetos.update(indexToUpdate, value);
                    stack.push(value);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

                        System.out.println("Else");
                        Integer indexToUpdate = stack.pop();
                        value = tercetos.size() + 1;
                        Integer indexBi = tercetos.create("BI", "", "");
                        stack.push(indexBi);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET NT$3 ELSE OPEN_CURLY_BRACKET NT$4 block CLOSE_CURLY_BRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    if(cantComparaciones==2){
                        Integer indexToUpdate = stack.pop();
                        Integer value = tercetos.size() + 2;
                        tercetos.update(indexToUpdate, value);
                        cantComparaciones= 1;
                    }
                    Integer indexToUpdate = stack.pop();
                    Integer value = tercetos.size() + 1;
                    tercetos.update(indexToUpdate, value);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$5 ::= 
            {
              Object RESULT =null;

                    cadena1=cade; posCade1=tercetos.create(cadena1, "", "");
                    Integer lenghtCad1=cadena1.length();
                    posLongCade1=tercetos.create(String.valueOf(lenghtCad1), "", "");
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

                    cadena2=cade; posCade2=tercetos.create(cadena2, "", "");
                    Integer lenghtCad1=cadena2.length();
                    posLongCade2=tercetos.create(String.valueOf(lenghtCad1), "", "");
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function ::= RESERVED_CONCAT OPEN_BRACKET element NT$5 COMMA element NT$6 COMMA INTEGER_CONSTANT CLOSE_BRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cte = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    posRecorte= tercetos.create(cte.toString(), "","");
                    tercetos.create("CMP", posRecorte, posLongCade1);
                    indexToUpdate=tercetos.create("BLE", "", "");
                    stack.push(indexToUpdate);
                    tercetos.create("CMP", posRecorte, posLongCade2);
                    indexToUpdate=tercetos.create("BLE","", "");
                    stack.push(indexToUpdate);
                    posCade1=tercetos.create(cadena1.substring(   Integer.valueOf(cte.toString()))  , "", "");
                    posCade2=tercetos.create(cadena2.substring( Integer.valueOf(cte.toString())), "", "");
                    Integer res=tercetos.create("+",posCade1, posCade2);
                    tercetos.create("=","res", res);
                    tercetos.create("error","", "");

                    indexToUpdate = stack.pop();
                    value = tercetos.size() ;
                    tercetos.update(indexToUpdate, value);
                    indexToUpdate = stack.pop();
                    tercetos.update(indexToUpdate, value);
                    System.out.println("ConcatenarConRecorte " );
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function ::= RESERVED_ESTACONTE OPEN_BRACKET element COMMA element CLOSE_BRACKET 
            {
              Object RESULT =null;
		 System.out.println("Esta Contenido"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$7 ::= 
            {
              Object RESULT =null;
indexIdentifier=tercetos.create(cade, "", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function ::= READ OPEN_BRACKET element NT$7 CLOSE_BRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                   tercetos.create("Read", indexIdentifier, "");
                   System.out.println("Read");
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$8 ::= 
            {
              Object RESULT =null;
indexIdentifier=tercetos.create(cade, "", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function ::= WRITE OPEN_BRACKET element NT$8 CLOSE_BRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    tercetos.create("Write", indexIdentifier, "");
                    System.out.println("Write string constant");
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // element ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 cade=id.toString();agregar_a_lista(id);System.out.println(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // element ::= STRING_CONSTANT 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 cade=constant.toString();agregar_a_lista(constant);System.out.println("element"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condition ::= comparation 
            {
              Object RESULT =null;
		 System.out.println("Condition"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condition ::= NOT comparation 
            {
              Object RESULT =null;
		 System.out.println("Condition with not"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$9 ::= 
            {
              Object RESULT =null;

                            indexComparationLeft=indexComparation;
                            cantComparaciones= 2;

                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condition ::= comparation NT$9 AND comparation 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 indexComparationRight=indexComparation; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$10 ::= 
            {
              Object RESULT =null;

                            indexComparationLeft=indexComparation;
                            Integer indexToUpdate = stack.pop();
                            Integer value = tercetos.size() + 1;
                            tercetos.update(indexToUpdate, value);
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condition ::= comparation NT$10 OR comparation 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

                            System.out.println("OR");
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$11 ::= 
            {
              Object RESULT =null;
indexExpressionLeft = indexExpression; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 cpm = tercetos.ConvertToAssembler(comparatorSimbol);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparation ::= expression NT$11 comparator NT$12 expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		indexExpressionRight = indexExpression;
                            indexComparation = tercetos.create("CMP", indexExpressionLeft, indexExpressionRight);
                            indexToUpdate = tercetos.create(cpm, "", "");
                            stack.push(indexToUpdate);
                            System.out.println("Comparation"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparation",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparation ::= OPEN_BRACKET expression comparator expression CLOSE_BRACKET 
            {
              Object RESULT =null;
		 System.out.println("(Comparation)"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparation",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparation ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparation",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparator ::= LESS_THAN 
            {
              Object RESULT =null;
		 System.out.println("<"); comparatorSimbol = "<"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparator ::= GREATER_THAN 
            {
              Object RESULT =null;
		 System.out.println(">"); comparatorSimbol = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparator ::= LESS_EQUAL_THAN 
            {
              Object RESULT =null;
		 System.out.println("<="); comparatorSimbol = "<="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparator ::= GREATER_EQUAL_THAN 
            {
              Object RESULT =null;
		 System.out.println(">="); comparatorSimbol = ">="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparator ::= EQUAL 
            {
              Object RESULT =null;
		 System.out.println("=="); comparatorSimbol = "==";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression PLUS term 
            {
              Object RESULT =null;
		
                System.out.println("+"); indexExpression = tercetos.create("+", indexFactor, indexExpression);
                etipo=simbolTable.sonCompatible(etipo,ttipo);
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression SUB term 
            {
              Object RESULT =null;
		
                System.out.println("-"); indexExpression = tercetos.create("-", indexFactor, indexExpression);
                etipo=simbolTable.sonCompatible(etipo,ttipo);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= term 
            {
              Object RESULT =null;
		 indexExpression = indexTerm; System.out.println("Expression = Term"); etipo=ttipo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // term ::= term MULT factor 
            {
              Object RESULT =null;
		 System.out.println("*"); indexExpression = tercetos.create("*", indexFactor, indexExpression);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= term DIV factor 
            {
              Object RESULT =null;
		 System.out.println("/"); indexExpression = tercetos.create("/", indexFactor, indexExpression);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= factor 
            {
              Object RESULT =null;
		 indexTerm = indexFactor; System.out.println("Term = factor"); ttipo=tipo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    indexFactor = tercetos.create(id.toString(), "", "");
    System.out.println("Id: " + id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= INTEGER_CONSTANT 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    System.out.println("Constant integer: " + constant );
    simbolTable.add("_"+constant, DataType.CTE_INT, constant.toString(), null);
    indexFactor = tercetos.create(constant.toString(), "", "");
    tipo=DataType.CTE_INT;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= STRING_CONSTANT 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    System.out.println("Constant string: " + constant );
    simbolTable.add("_"+constant, DataType.CTE_STRING, constant.toString(), constant.toString().length());
    indexFactor = tercetos.create(constant.toString(), "", "");
    tipo=DataType.CTE_STRING;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= FLOAT_CONSTANT 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    System.out.println("Constant float: " + constant ); 
    simbolTable.add("_"+constant, DataType.CTE_FLOAT, constant.toString(), null);
    indexFactor = tercetos.create(constant.toString(), "", "");
    tipo=DataType.CTE_FLOAT;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= OPEN_BRACKET expression CLOSE_BRACKET 
            {
              Object RESULT =null;
		 System.out.println("Factor = (Expression)"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // initiation ::= INIT OPEN_CURLY_BRACKET bloque_declaraciones CLOSE_CURLY_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initiation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloque_declaraciones ::= declare 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_declaraciones",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloque_declaraciones ::= bloque_declaraciones declare 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_declaraciones",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declare ::= listaVariables DOUBLE_POINTS tipo 
            {
              Object RESULT =null;
		 simbolTable.setearTipoAIds(elementTipados,tipo); System.out.println("decla->lst : tipo");elementTipados.clear(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // listaVariables ::= listaVariables COMMA IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  elementTipados.add(id.toString()); System.out.println("list->lista,id"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaVariables",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listaVariables ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 elementTipados.add(id.toString()); System.out.println("lista->id"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaVariables",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo ::= INT 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  tipo=DataType.INT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo ::= STRING 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   tipo=DataType.STRING; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   tipo=DataType.FLOAT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
