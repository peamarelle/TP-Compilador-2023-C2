package lyc.compiler;

import java_cup.runtime.*;
import java.util.*;
import lyc.compiler.simbolsTable.SimbolTable;
import lyc.compiler.simbolsTable.SimbolRow;
import lyc.compiler.simbolsTable.DataType;
import lyc.compiler.tercetos.Tercetos;
import lyc.compiler.tercetos.Terceto;
import lyc.compiler.assembler.Assembler;

class Parser;
action code{:
    Stack<Integer> stack = new Stack<Integer>();
    public SimbolTable simbolTable = SimbolTable.getSingletonInstance();
    public ArrayList<String> identifiersList = new ArrayList();
    ArrayList<Object> element = new ArrayList<Object>();
    ArrayList<String> elementTipados = new ArrayList<String>();
    int medio;
    DataType tipo,ttipo,etipo,ftipo,etipoi,etipod;

    public Tercetos tercetos = Tercetos.getSingletonInstance();
    public Assembler assembler = Assembler.getSingletonInstance();

    //en duda si se usa
    public void agregar_a_lista(Object elem)  {
            element.add(elem);
    }

    Integer indexFactor = -1;
    Integer indexExpression = -1;
    Integer indexTerm = -1;
    Integer indexAssignment = -1;
    //Integer indexComparator = -1;
    //Integer indexRead = -1;
    //Integer indexWrite = -1;
    Integer cantComparaciones=1;
    Integer value=-1;
    Integer jumpWhile=-1;
    Integer indexExpressionLeft = -1;
    Integer indexExpressionRight = -1;
    Integer indexComparation = -1;
    Integer indexToUpdate=-1;
    Integer indexIdentifier = -1;
    Integer indexComparationLeft=-1;
    Integer indexComparationRight=-1;
    String comparatorSimbol;
    String cpm ;


    ///funciones especiales
    String cade,cadena1, cadena2;
    Integer posCade1,posCade2,posLongCade1,posLongCade2,posRecorte;
:}

parser code{:
    public List<SimbolRow> getListaSimbolos() {
        return action_obj.simbolTable.getListaSimbolos();
    }
:}

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal IDENTIFIER;
terminal WHILE;
terminal IF;
terminal ELSE;
terminal READ;
terminal WRITE;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal LESS_THAN;
terminal LESS_EQUAL_THAN;
terminal GREATER_THAN;
terminal GREATER_EQUAL_THAN;
terminal EQUAL;
terminal AND;
terminal OR;
terminal NOT;
terminal INIT;
terminal DOUBLE_POINTS;
terminal FLOAT;
terminal STRING;
terminal INT;
terminal COMMA;
terminal RESERVED_CONCAT;
terminal RESERVED_ESTACONTE;

// Non Terminals
non terminal sentence;
non terminal block;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal iteration;
non terminal selection;
non terminal condition;
non terminal comparation;
non terminal comparator;
non terminal initiation;
non terminal declare;
non terminal variable;
non terminal program;
non terminal params;
non terminal element;
non terminal listaVariables;
non terminal tipo;
non terminal bloque_declaraciones;
non terminal function;

// Start Symbol Definition
start with program;

program ::= initiation block {: tercetos.print(); assembler.generar(tercetos.tercetos);:};

block ::= sentence {: System.out.println("Block"); :};
block ::= block sentence {: System.out.println("Blocks"); :};

sentence ::= assignment {: System.out.println("End Sentence"); :};
sentence ::= iteration {: System.out.println("Sentence interation"); :};
sentence ::= selection {: System.out.println("Sentence selecction"); :};
sentence ::= function {: System.out.println("Sentence function"); :};


assignment ::= IDENTIFIER:id {:
                            indexIdentifier = tercetos.create(id.toString(), "", "");
                            simbolTable.estaEnSimbolTable(id.toString());
                        :}
              ASSIG expression {: indexAssignment = tercetos.create("=", indexIdentifier, indexExpression);
    System.out.println("Assignment"+indexAssignment);
    System.out.println(simbolTable.buscaRow(id.toString()));
    simbolTable.sonCompatible(id.toString(),etipo);
    :};
iteration ::= WHILE OPEN_BRACKET {:
                jumpWhile = tercetos.size() + 1;
            :}condition {:

            :}CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET
             {:
                if(cantComparaciones==2){
                    Integer indexToUpdate = stack.pop();
                    Integer value = tercetos.size() + 2;
                    tercetos.update(indexToUpdate, value);
                    cantComparaciones= 1;
                }
                Integer indexToUpdate = stack.pop();
                Integer value = tercetos.size() + 2;
                tercetos.update(indexToUpdate, value);
                Integer indexBi = tercetos.create("BI", jumpWhile, "");
             :};


selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET
                {:
                     if(cantComparaciones==2){
                         Integer indexToUpdate = stack.pop();
                         Integer value = tercetos.size() + 1;
                         tercetos.update(indexToUpdate, value);
                         cantComparaciones= 1;
                     }
                     Integer indexToUpdate = stack.pop();
                     Integer value = tercetos.size() + 1;
                     tercetos.update(indexToUpdate, value);
                :};


selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET
                {:
                    indexToUpdate = stack.pop();
                    value = tercetos.size() + 2;
                    System.out.println("If");
                    tercetos.update(indexToUpdate, value);
                    stack.push(value);
                :}
               ELSE OPEN_CURLY_BRACKET
                    {:
                        System.out.println("Else");
                        Integer indexToUpdate = stack.pop();
                        value = tercetos.size() + 1;
                        Integer indexBi = tercetos.create("BI", "", "");
                        stack.push(indexBi);
                    :}
               block CLOSE_CURLY_BRACKET
                 {:
                    if(cantComparaciones==2){
                        Integer indexToUpdate = stack.pop();
                        Integer value = tercetos.size() + 2;
                        tercetos.update(indexToUpdate, value);
                        cantComparaciones= 1;
                    }
                    Integer indexToUpdate = stack.pop();
                    Integer value = tercetos.size() + 1;
                    tercetos.update(indexToUpdate, value);
                 :};


function ::= RESERVED_CONCAT OPEN_BRACKET element
                  {:
                    cadena1=cade; posCade1=tercetos.create(cadena1, "", "");
                    Integer lenghtCad1=cadena1.length();
                    posLongCade1=tercetos.create(String.valueOf(lenghtCad1), "", "");
                  :}
             COMMA element
                  {:
                    cadena2=cade; posCade2=tercetos.create(cadena2, "", "");
                    Integer lenghtCad1=cadena2.length();
                    posLongCade2=tercetos.create(String.valueOf(lenghtCad1), "", "");
                  :}
             COMMA INTEGER_CONSTANT:cte CLOSE_BRACKET
                 {:
                    posRecorte= tercetos.create(cte.toString(), "","");
                    tercetos.create("CMP", posRecorte, posLongCade1);
                    indexToUpdate=tercetos.create("BLE", "", "");
                    stack.push(indexToUpdate);
                    tercetos.create("CMP", posRecorte, posLongCade2);
                    indexToUpdate=tercetos.create("BLE","", "");
                    stack.push(indexToUpdate);
                    posCade1=tercetos.create(cadena1.substring(   Integer.valueOf(cte.toString()))  , "", "");
                    posCade2=tercetos.create(cadena2.substring( Integer.valueOf(cte.toString())), "", "");
                    Integer res=tercetos.create("+",posCade1, posCade2);
                    tercetos.create("=","res", res);
                    tercetos.create("error","", "");

                    indexToUpdate = stack.pop();
                    value = tercetos.size() ;
                    tercetos.update(indexToUpdate, value);
                    indexToUpdate = stack.pop();
                    tercetos.update(indexToUpdate, value);
                    System.out.println("ConcatenarConRecorte " );
                 :};

function ::= RESERVED_ESTACONTE OPEN_BRACKET element {: cadena1 = cade; :}
                COMMA element  {: cadena2 = cade; :}CLOSE_BRACKET
                {:
                        posCade1=tercetos.create(cadena1, "", "");
                        posCade2=tercetos.create(cadena2, "", "");
                        tercetos.create("Esta contenido", posCade1, posCade2);
                        tercetos.create("CMP", posCade1, posCade2);
                        indexToUpdate= tercetos.create("BNE", "", "");
                        stack.push(indexToUpdate);
                        tercetos.create("TRUE", "" , "");
                        indexToUpdate=tercetos.create("BI", "" , "");
                        stack.push(indexToUpdate);
                        tercetos.create("FALSE", "" , "");
                        indexToUpdate = stack.pop();
                        value = tercetos.size() ;
                        tercetos.update(indexToUpdate, value+1);
                        indexToUpdate = stack.pop();
                        value = tercetos.size() ;
                        tercetos.update(indexToUpdate, value);

                        System.out.println("Esta Contenido");
                  :};
function ::= READ OPEN_BRACKET element {:indexIdentifier=tercetos.create(cade, "", ""); :} CLOSE_BRACKET
                 {:
                   tercetos.create("Read", indexIdentifier, "");
                   System.out.println("Read");
                 :};

function ::= WRITE OPEN_BRACKET element {:indexIdentifier=tercetos.create(cade, "", ""); :} CLOSE_BRACKET
                 {:
                    tercetos.create("Write", indexIdentifier, "");
                    System.out.println("Write string constant");
                 :};


element ::= IDENTIFIER:id  {: cade=id.toString();agregar_a_lista(id);System.out.println(id); :};
element ::= STRING_CONSTANT:constant {: cade=constant.toString();agregar_a_lista(constant);System.out.println("element"); :};



condition ::= comparation {: System.out.println("Condition"); :};
condition ::= NOT comparation {: System.out.println("Condition with not"); :};

condition ::= comparation {:
                            indexComparationLeft=indexComparation;
                            cantComparaciones= 2;

                           :}
                            AND comparation {: indexComparationRight=indexComparation; :};

condition ::= comparation {:
                            indexComparationLeft=indexComparation;
                            Integer indexToUpdate = stack.pop();
                            Integer value = tercetos.size() + 1;
                            tercetos.update(indexToUpdate, value);
                          :}
                            OR comparation {:

                            System.out.println("OR");
                            :};

comparation ::= expression {:
                            etipoi=etipo;
                            indexExpressionLeft = indexExpression;
                            :}
                comparator {:
                            cpm = tercetos.ConvertToAssembler(comparatorSimbol);
                            :}
                expression {:
                            etipod=etipo;
                            indexExpressionRight = indexExpression;
                            indexComparation = tercetos.create("CMP", indexExpressionLeft, indexExpressionRight);
                            indexToUpdate = tercetos.create(cpm, "", "");
                            stack.push(indexToUpdate);
                            System.out.println("Comparation");
                            etipo=simbolTable.sonCompatible(etipoi,etipod);
                            :};
comparation ::= OPEN_BRACKET expression comparator expression CLOSE_BRACKET {: System.out.println("(Comparation)"); :};
comparation ::= function;

comparator ::= LESS_THAN {: System.out.println("<"); comparatorSimbol = "<"; :};
comparator ::= GREATER_THAN {: System.out.println(">"); comparatorSimbol = ">"; :};
comparator ::= LESS_EQUAL_THAN {: System.out.println("<="); comparatorSimbol = "<="; :};
comparator ::= GREATER_EQUAL_THAN {: System.out.println(">="); comparatorSimbol = ">="; :};
comparator ::= EQUAL {: System.out.println("=="); comparatorSimbol = "==";:};


expression ::= expression PLUS term {:
                System.out.println("+"); indexExpression = tercetos.create("+", indexFactor, indexExpression);
                etipo=simbolTable.sonCompatible(etipo,ttipo);
             :};
expression ::= expression SUB term {:
                System.out.println("-"); indexExpression = tercetos.create("-", indexFactor, indexExpression);
                etipo=simbolTable.sonCompatible(etipo,ttipo);
            :};
expression ::= term {: indexExpression = indexTerm; System.out.println("Expression = Term"); etipo=ttipo;:};
term ::= term MULT factor {: System.out.println("*");
                    indexExpression = tercetos.create("*", indexFactor, indexExpression);
                     ttipo=simbolTable.sonCompatible(ttipo,ftipo);
                    :};
term ::= term DIV factor {: System.out.println("/");
                    indexExpression = tercetos.create("/", indexFactor, indexExpression);
                     ttipo=simbolTable.sonCompatible(ttipo,ftipo);
            :};
term ::= factor {: indexTerm = indexFactor; System.out.println("Term = factor"); ttipo=ftipo;:};
factor ::= IDENTIFIER:id  
{:
    simbolTable.estaEnSimbolTable(id.toString());
    indexFactor = tercetos.create(id.toString(), "", "");
    System.out.println("Id: " + id);
:};
factor ::= INTEGER_CONSTANT:constant 
{: 
    System.out.println("Constant integer: " + constant );
    simbolTable.add("_"+constant, DataType.CTE_INT, constant.toString(), null);
    indexFactor = tercetos.create(constant.toString(), "", "");
    ftipo=DataType.CTE_INT;
:};
factor ::= STRING_CONSTANT:constant  
{: 
    System.out.println("Constant string: " + constant );
    simbolTable.add("_"+constant, DataType.CTE_STRING, constant.toString(), constant.toString().length());
    indexFactor = tercetos.create(constant.toString(), "", "");
    ftipo=DataType.CTE_STRING;
:};
factor ::= FLOAT_CONSTANT:constant   
{: 
    System.out.println("Constant float: " + constant ); 
    simbolTable.add("_"+constant, DataType.CTE_FLOAT, constant.toString(), null);
    indexFactor = tercetos.create(constant.toString(), "", "");
    ftipo=DataType.CTE_FLOAT;
:};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};

initiation ::= INIT OPEN_CURLY_BRACKET bloque_declaraciones CLOSE_CURLY_BRACKET;

bloque_declaraciones ::= declare | bloque_declaraciones declare;
declare ::= listaVariables DOUBLE_POINTS tipo {: simbolTable.setearTipoAIds(elementTipados,tipo); System.out.println("decla->lst : tipo");elementTipados.clear(); :};
listaVariables ::= listaVariables COMMA IDENTIFIER:id {:  elementTipados.add(id.toString()); System.out.println("list->lista,id"); :};
listaVariables ::= IDENTIFIER:id {: elementTipados.add(id.toString()); System.out.println("lista->id"); :};

tipo ::= INT:tip  {:  tipo=DataType.INT; :};
tipo ::= STRING:tip  {:   tipo=DataType.STRING; :};
tipo ::= FLOAT:tip {:   tipo=DataType.FLOAT; :};
//variable ::= IDENTIFIER:id DOUBLE_POINTS INT {: simbolTable.add(""+id, DataType.INT, null, null); System.out.println("variable " + id.toString());:};
//variable ::= IDENTIFIER:id DOUBLE_POINTS STRING {: simbolTable.add(""+id, DataType.STRING, null, null); System.out.println("variable " + id.toString());:};
//variable ::= IDENTIFIER:id DOUBLE_POINTS FLOAT {: simbolTable.add(""+id, DataType.FLOAT, null, null); System.out.println("variable " + id.toString());:};
//variable ::= IDENTIFIER COMMA variable  {:  System.out.println("variableLista");:};

